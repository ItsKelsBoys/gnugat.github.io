<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="https://gnugat.github.io/feed/atom.xml" rel="self"/>
    <link href="https://gnugat.github.io/"/>
    <updated>2017-05-21T14:11:06+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Links from 2015]]></title>
            <link href="https://gnugat.github.io/2016/01/27/links-from-2015.html"/>
            <updated>2016-01-27T00:00:00+00:00</updated>
            <id>https://gnugat.github.io/2016/01/27/links-from-2015.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>TL;DR</strong>: Links I tweeted during 2015</p>
</blockquote>

<p>It's funny how old principles are still useful today. In 2015, the most important
ones I've learned are the following:</p>

<ul>
<li>Command/Query Responsibility Segregation (CQRS): separate the "read" logic from
the "write" logic</li>
<li>Event Sourcing (ES): recording every action done for analytics and rollback
purpose</li>
<li>Command Bus: store and validate input in a Command object, pass it to a
Command Bus middleware that will find and execute the appropriate
Command Handler which will execture the logic</li>
<li>Framework / Library agnosticism: decouple from vendors to be able to
change/upgrade them without friction</li>
<li>microservices: reduce the scope of an API, organize them into a communicating network</li>
<li>Monolithic Repository: store related applications in the same git repository</li>
</ul>

<p>It was a year full of links, so here they are!</p>

<h2 id="articles-highlight">Articles Highlight</h2>

<ul>
<li><a href="http://blog.confluent.io/2015/05/27/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/">Using logs to build a solid data infrastructure, or why dual writes are a bad idea</a></li>
<li><a href="https://codeascraft.com/2015/07/29/targeting-broad-queries-in-search/">Targeting broad queries in search</a></li>
</ul>

<h2 id="tools-highlight">Tools Highlight</h2>

<ul>
<li><a href="http://docs.puli.io/en/latest/">Puli</a>:

<ul>
<li><a href="http://webmozarts.com/2015/01/12/puli-1-0-beta-released/">1.0-beta release</a></li>
<li>Slides: <a href="https://speakerdeck.com/webmozart/puli-phps-next-package-revolution">Pulis, PHP next package revolution</a></li>
<li><a href="http://webmozarts.com/2015/01/14/resource-discovery-with-puli/">Resource discovery</a></li>
<li><a href="http://webmozarts.com/2015/03/20/managing-web-resources-with-puli/">Managing web resources</a></li>
</ul></li>
<li>Refactoring Browser:

<ul>
<li><a href="http://martinfowler.com/articles/refactoringRubicon.html">Refactoring Rubicon</a></li>
<li><a href="https://github.com/QafooLabs/php-refactoring-browser">Qafoo PHP RefactoringBrowser</a></li>
</ul></li>
<li><a href="https://github.com/padraic/humbug">Humbug</a>:

<ul>
<li><a href="http://blog.astrumfutura.com/2015/01/lies-damned-lies-and-code-coverage-towards-mutation-testing/">Code Coverage lies, toward mutation testing</a></li>
<li><a href="http://blog.astrumfutura.com/2015/04/introduction-to-humbug-a-mutation-testing-framework-for-php/">Introduction to Humbug, a mutation testing framework for PHP</a></li>
<li><a href="http://davedevelopment.co.uk/2015/01/07/probing-test-suite-quality-with-mutation-testing.html">Probing test suite quality with mutation testing</a></li>
</ul></li>
<li><a href="https://tactician.thephpleague.com/">Tactician, the PHP Command Bus</a>:

<ul>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/a-wave-of-command-buses/">A wave of Command Buses</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/responsibilities-of-the-command-bus/">Responsibilities of the Command Bus</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/from-commands-to-events/">From Commands to Events</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/some-questions-about-the-command-bus/">Command Bus FAQ</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/collecting-events-and-the-events-aware-command-bus/">Collecting events and the EventsAware Command Bus</a></li>
<li><a href="http://verraes.net/2015/01/messaging-flavours/">Messaging Flavours</a></li>
<li><a href="http://verraes.net/2015/02/form-command-model-validation/">Form Command model validation</a></li>
<li><a href="http://boldradius.com/blog-post/VSQCySkAACcA4k5J/easy-scalability-with-akka">CQRS vs CRUD performances and scalability</a></li>
</ul></li>
<li><a href="http://lnav.org/">The log file navigator</a></li>
<li><a href="https://github.com/ramsey/uuid">UUID</a>:

<ul>
<li><a href="https://philsturgeon.uk/http/2015/09/03/auto-incrementing-to-destruction/">auto incrementing to destruction</a></li>
<li><a href="https://www.clever-cloud.com/blog/engineering/2015/05/20/Why-Auto-Increment-Is-A-Terrible-Idea">Why auto incrementing is a terrible idea</a></li>
</ul></li>
<li>Pomm:

<ul>
<li><a href="http://www.pomm-project.org/news/pomm-2-0-0-is-out.html">Pomm 2.0 is out</a></li>
<li><a href="http://www.pomm-project.org/news/a-short-focus-on-pomm-s-foundation.html">A short focus on Pomm Foundation</a></li>
</ul></li>
</ul>

<h2 id="interesting-talks">Interesting Talks</h2>

<ul>
<li>Monolithic Repository:

<ul>
<li><a href="https://qafoo.com/talks/15_08_froscon_monorepos.pdf">Monolithic Repository</a></li>
<li><a href="http://www.slideshare.net/StenHiedel/symfony-uk-meetup-21-may">How to manage multiple Composer packages within a single respository</a></li>
<li>see also article: <a href="http://sroze.io/2015/09/14/managing-monolith-repositories-with-composers-path-repository/">Managing monolith repositories with composers path repository</a></li>
</ul></li>
<li>Doctrine:

<ul>
<li><a href="https://qafoo.com/talks/15_09_symfony_live_london_doctrine2_to_use_or_not_to_use.pdf">Doctrine: to use or not to use</a></li>
<li><a href="http://ocramius.github.io/blog/doctrine-orm-optimization-hydration/">Doctrine ORM optimization hydration</a></li>
</ul></li>
<li>PHP Interoperability:

<ul>
<li><a href="https://speakerdeck.com/michaelcullum/php-fig-the-psrs-you-dont-know-about">PHP FIG, the PSRs you do not know about</a></li>
<li><a href="http://mnapoli.fr/presentations/psr-0-12/">PSR 0 to 12</a></li>
<li><a href="http://talks.ppi.io/20150513-phpsw">The PHP Interoperability Framework</a></li>
</ul></li>
<li>Desgin:

<ul>
<li><a href="http://www.slideshare.net/mobile/CiaranMcNulty/why-your-test-suite-sucks">Why your test suite sucks</a></li>
<li><a href="https://speakerdeck.com/jakzal/embracing-change">Embracing change</a></li>
<li><a href="http://www.slideshare.net/mobile/CiaranMcNulty/driving-design-through-examples">Driving design through examples</a></li>
<li><a href="http://www.slideshare.net/NicolPignatelli/brownfield-domain-driven-design-48240538">Brownfield Domain Driven Desgin</a></li>
<li><a href="http://www.slideshare.net/matthiasnoback/the-quest-for-global-design-principles">The quest for global design principles</a></li>
<li><a href="http://www.slideshare.net/matthiasnoback/hexagonal-architecture-messageoriented-software-design">Hexagonal architecture, message oriented software design</a></li>
<li><a href="http://moquet.net/talks/phptour-2015">CQRS and Event Sourcing</a></li>
</ul></li>
<li><a href="https://speakerdeck.com/odolbeau/symfony2-killed-me">Symfony killed me</a></li>
<li><a href="https://speakerdeck.com/odolbeau/logs-hunting">Logs hunting</a></li>
<li><a href="http://www.slideshare.net/cakper/2014-0821-symfony-uk-meetup-scaling-symfony2-apps-with-rabbit-mq">Scaling Symofny apps with RabbitMq</a></li>
<li><a href="http://andrewcarteruk.github.io/slides/breaking-boundaries-with-fastcgi-symfony/#/">Breaking boundaries with FastCGI Symfony</a></li>
<li>in french: <a href="https://speakerdeck.com/lyrixx/symfony-live-2015-paris-monitorer-sa-prod">Monitorer sa prod</a></li>
</ul>

<h2 id="tests%3A">Tests:</h2>

<ul>
<li>Test Driven Desing (TDD):

<ul>
<li><a href="http://codurance.com/2015/05/12/does-tdd-lead-to-good-design/">Does TDD lead to good design?</a></li>
<li><a href="https://medium.com/@davidihunt/tdd-and-complexity-1bbd5ca51ee7">TDD and complexity</a></li>
</ul></li>
<li><a href="http://verraes.net/2015/01/economy-of-tests/">Economy of tests</a></li>
<li><a href="http://blog.8thlight.com/dariusz-pasciak/2015/01/12/your-test-suite-is-useless.html">Your test suite is useless</a></li>
<li><a href="https://sites.google.com/site/unclebobconsultingllc/specs-vs-tests">Specs VS Tests</a></li>
<li><a href="http://googletesting.blogspot.co.uk/2015/04/just-say-no-to-more-end-to-end-tests.html">Just say no to more end to end tests</a></li>
<li><a href="http://elnur.pro/testing-is-not-a-choice/">Testing is not a choice</a></li>
<li><a href="http://tech.mybuilder.com/coupling-tests/">Coupling tests</a></li>
<li><a href="https://developer.atlassian.com/blog/2015/05/open-letter-from-an-ignored-test/">Open letter from an ignored test</a></li>
<li><a href="https://cucumber.io/blog/2015/03/24/single-source-of-truth">Single source of truth</a></li>
<li><a href="http://dannorth.net/introducing-bdd/">Introducing BDD</a></li>
<li><a href="http://martinfowler.com/articles/nonDeterminism.html">Eradicating Non-Determinism in Tests</a></li>
</ul>

<h2 id="php-interoperability">PHP Interoperability</h2>

<ul>
<li>PSR 7:

<ul>
<li><a href="https://mwop.net/blog/2015-01-08-on-http-middleware-and-psr-7.html">On HTTP middleware and PSR 7</a></li>
<li><a href="https://mwop.net/blog/2015-01-26-psr-7-by-example.html">PSR 7 by example</a></li>
<li><a href="http://srcmvn.com/blog/2015/02/18/psr-7-and-the-future-of-php/">PSR 7 and the future of PHP</a></li>
<li><a href="http://evertpot.com/psr-7-issues/">PSR 7 issues</a></li>
<li><a href="http://symfony.com/blog/psr-7-support-in-symfony-is-here">PSR 7 support in Symfony is here</a></li>
<li><a href="http://dunglas.fr/2015/06/using-psr-7-in-symfony">Using PSR 7 in Symfony</a></li>
<li><a href="http://blog.madewithlove.be/post/http-client-for-sdks/">HTTP client for SDKs</a></li>
</ul></li>
<li><a href="http://mouf-php.com/psr7-container-interop-equals-cross-framework-module-system">PSR 7 Container Interop = cross framework module system</a></li>
<li><a href="http://mouf-php.com/psr-11-use-cases">PSR 11 use cases</a></li>
<li><a href="http://www.thecodingmachine.com/psr-11-performance-impact-of-the-delegate-lookup-feature/">PSR 11, performance impact of the delegate look-up feature</a></li>
<li><a href="http://blog.phpdeveloper.org/2015/05/22/php-security-psr-9psr-10/">PHP Security PSR 9 and 10</a></li>
<li><a href="https://www.acquia.com/blog/psr-what-shared-standards-bright-future">PSR-What? Shared Standards for a Bright Future</a></li>
</ul>

<h2 id="pet-projects">Pet projects</h2>

<ul>
<li><a href="https://github.com/gnugat/redaktilo/releases/tag/v1.7.0">Redaktilo 1.7</a></li>
<li><a href="https://gist.github.com/gnugat/492a192f9f57c00098b1">Stack middleware to rollback database transactions</a></li>
<li><a href="http://memio.github.io/memio/">Memio</a>:

<ul>
<li><a href="https://github.com/ciaranmcnulty/phpspec-typehintedmethods">its origin</a></li>
<li><a href="https://github.com/memio/spec-gen">SpecGen</a></li>
</ul></li>
<li>Symfony Micro Framework:

<ul>
<li><a href="https://github.com/gnugat/symfony-empty-edition">Symfony Empty Edition</a></li>
<li><a href="https://github.com/gnugat/micro-framework-bundle">MicroFrameworkBundle</a></li>
</ul></li>
</ul>

<h2 id="design-patterns">Design Patterns</h2>

<ul>
<li><a href="http://shawnmc.cool/the-repository-pattern">The Repository pattern</a></li>
<li><a href="http://enterprisecraftsmanship.com/2015/04/13/dto-vs-value-object-vs-poco">DTO vs Value Object vs POCO</a></li>
<li><a href="http://engineering.peertransfer.com/blog/decoupling-logic-architecture-repositories">Decoupling architecture and domain with repositories</a></li>
<li><a href="http://rob.conery.io/2014/03/04/repositories-and-unitofwork-are-not-a-good-idea/">Repositories On Top UnitOfWork Are Not a Good Idea</a></li>
</ul>

<h2 id="microservice">microservice</h2>

<ul>
<li><a href="http://martinfowler.com/bliki/MicroservicePremium.html">Microservice Premium</a></li>
<li><a href="http://martinfowler.com/bliki/MonolithFirst.html">Monolith First</a></li>
<li><a href="http://martinfowler.com/articles/dont-start-monolith.html">Don't start with a monolith</a></li>
<li><a href="http://capgemini.github.io/architecture/is-rest-best-microservices">Is REST best microservices</a></li>
<li><a href="http://martinfowler.com/articles/microservice-trade-offs.html">Microservices trade offs</a></li>
<li><a href="http://blog.christianposta.com/microservices/youre-not-going-to-do-microservices/">You're not going to do microservices</a></li>
</ul>

<h2 id="refactoring">Refactoring</h2>

<ul>
<li><a href="http://martinfowler.com/articles/refactoring-external-service.html">Refactoring external service</a></li>
<li>Refactoring the cat API client:

<ul>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/07/refactoring-the-cat-api-client-part-1/">part 1</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/07/refactoring-the-cat-api-client-part-2/">part 2</a></li>
<li><a href="http://php-and-symfony.matthiasnoback.nl/2015/07/refactoring-the-cat-api-client-part-3/">part 3</a></li>
</ul></li>
</ul>

<h2 id="keep-it-simple">Keep it Simple</h2>

<ul>
<li><a href="http://97things.oreilly.com/wiki/index.php/Simplicity_before_generality,_use_before_reuse">Simplicity before generality, use before reuse</a></li>
<li><a href="http://blog.ircmaxell.com/2015/03/thoughts-on-design-of-apis.html">Thoughts on design of APIs</a></li>
<li><a href="http://verraes.net/2014/08/dry-is-about-knowledge/">DRY is about knowledge</a></li>
</ul>

<h2 id="oop">OOP</h2>

<ul>
<li><a href="https://www.thoughtworks.com/insights/blog/composition-vs-inheritance-how-choose">Composition VS inheritance, how to choose</a></li>
<li><a href="http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en">The meaning of Object Oriented Programming</a></li>
</ul>

<h2 id="git">Git</h2>

<ul>
<li><a href="https://akrabat.com/the-beginners-guide-to-rebasing-your-pr/">The beginners guide to rebasing your PR</a></li>
<li><a href="http://jeffkreeftmeijer.com/2010/the-magical-and-not-harmful-rebase/">The magical and not harmful rebase</a></li>
<li><a href="http://blog.rjkip.nl/2015/08/28/gits-interactive-patch-mode/">Git's interractive patch mode</a></li>
<li><a href="http://blog.8thlight.com/makis-otman/2015/07/08/git-disciplined.html">Git disciplined</a></li>
<li><a href="http://zachholman.com/posts/git-commit-history/">Utter Disregard for Git Commit History</a></li>
</ul>

<h2 id="security">Security</h2>

<ul>
<li><a href="http://www.antirez.com/news/96">A few things about Redis security</a></li>
<li><a href="http://blog.slaks.net/2015-10-13/web-authentication-arms-race-a-tale-of-two-security-experts/">The Web Authentication Arms Race – A Tale of Two Security Experts</a></li>
<li><a href="https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence">Secure authentication PHP with long term persistence</a></li>
</ul>

<h2 id="postgresql">PostgreSQL</h2>

<ul>
<li>What PostgreSQL has over other Open Source SQL databases:

<ul>
<li><a href="https://www.compose.io/articles/what-postgresql-has-over-other-open-source-sql-databases/">part 1</a></li>
<li><a href="https://www.compose.io/articles/what-postgresql-has-over-other-open-source-sql-databases-part-ii/">part 2</a></li>
</ul></li>
<li><a href="http://rob.conery.io/2014/05/29/a-better-id-generator-for-postgresql/">A better ID generator for PostgreSQL</a></li>
<li><a href="http://hashrocket.com/blog/posts/faster-json-generation-with-postgresql">Faster JSON generation with PostgreSQL</a></li>
<li><a href="http://developer.olery.com/blog/goodbye-mongodb-hello-postgresql/">Goodbye MongoDB, hello PostgreSQL</a></li>
</ul>

<h2 id="rest">REST</h2>

<ul>
<li><a href="http://www.nurkiewicz.com/2015/07/restful-considered-harmful.html">RESTful considered harmful</a></li>
<li><a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">Best practices for a pragmatic RESTful API</a></li>
</ul>

<h2 id="performance">Performance</h2>

<ul>
<li><a href="https://tideways.io/profiler/blog/5-doctrine-orm-performance-traps-you-should-avoid">5 Doctrine ORM performance traps you should avoid</a></li>
<li><a href="https://tideways.io/profiler/blog/essential-macro-optimizations-to-improve-php-performance">Essential macro optimizations to improve PHP performance</a></li>
<li><a href="https://tideways.io/profiler/blog/5-ways-to-optimize-symfony-baseline-performance">5 ways to optimize Symfony baseline performance</a></li>
<li><a href="http://marcjschmidt.de/blog/2014/02/08/php-high-performance.html">PHP high performance</a></li>
<li><a href="http://phpfastcgi.github.io/general/2015/11/04/introducing-phpfastcgi.html">Intproducting PHP FastCGI</a></li>
<li><a href="http://blog.kevingomez.fr/til/2015/07/26/why-is-uniqid-slow/">Why is uniqid slow?</a></li>
</ul>

<h2 id="agile">Agile</h2>

<ul>
<li><a href="http://jelrik.me/blog/2015/10/17/transform-your-standup/">Transform your stand up</a></li>
<li><a href="http://blog.8thlight.com/malcolm-newsome/2015/01/15/they-wont-be-interested.html">They won't be interrested</a></li>
<li><a href="http://blog.cleancoder.com/uncle-bob/2015/04/15/DoesOrganizationMatter.html">Does organization matter</a></li>
<li><a href="http://benjiweber.co.uk/blog/2015/04/17/modern-extreme-programming/">Modern extreme programming</a></li>
<li><a href="http://frankneff.ch/business/2015/04/21/if-pragmatism-raises-technical-debt-call-it-oversimplification/">If pragmatism raises technical debt, call it over simplification</a></li>
<li><a href="http://www.mountaingoatsoftware.com/blog/dont-blindly-follow">Don't blindly follow</a></li>
<li><a href="http://mattbriggs.net/blog/2015/06/01/the-role-of-a-senior-developer/">The role of a senior developer</a></li>
<li><a href="http://blog.toolshed.com/2015/05/the-failure-of-agile.html">The failure of agile</a></li>
<li><a href="http://mikehadlow.blogspot.fr/2014/06/heisenberg-developers.html">Heisenberg developers</a></li>
</ul>

<h2 id="ddd">DDD</h2>

<ul>
<li><a href="http://weronikalabaj.com/to-ddd-or-not-to-ddd-what-to-do-if-your-domain-is-boring/">To DDD or not to DDD, what to do if your domain is boring</a></li>
<li><a href="https://lostechies.com/gabrielschenker/2015/04/16/ddd-revisited/">DDD revisited</a></li>
<li><a href="http://codebetter.com/iancooper/2011/07/15/why-crud-might-be-what-they-want-but-may-not-be-what-they-need/">Why CRUD might be what they want but not what they need</a></li>
</ul>

<h2 id="symfony">Symfony</h2>

<ul>
<li><a href="http://jolicode.com/blog/do-not-use-fosuserbundle">Do not use FOSUserBundle</a></li>
<li><a href="http://mmoreram.github.io/blog/2015/08/20/re-thinking-event-listeners/">Re-thinking event listeners</a></li>
<li><a href="http://thorpesystems.com/blog/tagging-symfony-services">Tagging Symfony services</a></li>
<li><a href="https://www.pmg.com/blog/symfony-from-scratch/">Symfony from scratch</a></li>
<li><a href="http://programmingarehard.com/2015/03/04/structing-my-application.html">Structuring my application</a></li>
<li><a href="http://mmoreram.com/blog/2015/11/20/your-packages-dependencies/">Your package dependencies</a></li>
</ul>

<h2 id="misc">Misc</h2>

<ul>
<li><a href="http://kukuruku.co/hub/programming/do-not-learn-frameworks-learn-the-architecture">Do not learn frameworks, lean the architecture</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2015/08/06/let-the-magic-die.html">Let the magic die</a></li>
<li><a href="http://www.levelofindirection.com/journal/2015/5/1/naming-is-hard-or-is-it.html">Naming is hard, or is it?</a></li>
<li><a href="http://www.freeklijten.nl/home/2015/06/24/Setter-anxiety">Setter anxiety</a></li>
<li><a href="http://blog.codinghorror.com/doing-terrible-things-to-your-code/">Doing terrible things to your code</a></li>
<li><a href="http://www.stilldrinking.org/programming-sucks">Programming sucks</a></li>
<li><a href="http://evertpot.com/switching-to-generators/">Switching to generators</a></li>
<li><a href="http://www.vertabelo.com/blog/technical-articles/orms-under-the-hood">ORMs under the hood</a></li>
<li><a href="http://blog.pivotal.io/pivotal-labs/labs/hexagonal-rails-and-the-ludicrous-terminal-application">Hexagonal</a></li>
<li><a href="http://burnout.io/">Burnout</a></li>
<li><a href="http://rosstuck.com/formatting-exception-messages/">Formatting exception messages</a></li>
<li><a href="http://mnapoli.fr/approaching-coding-style-rationally/">Approaching coding style rationally</a></li>
<li><a href="http://blog.frankdejonge.nl/pipelines-immutability-and-privates/">Pipelines, imutability and privates</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Links from 2014]]></title>
            <link href="https://gnugat.github.io/2015/01/07/links-from-2014.html"/>
            <updated>2015-01-07T00:00:00+00:00</updated>
            <id>https://gnugat.github.io/2015/01/07/links-from-2014.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>TL;DR</strong>: Links I tweeted during 2014</p>
</blockquote>

<p>I've tweeted a lot of links in 2014, so in order to keep track of them I've
decided to list them here:</p>

<ul>
<li><a href="#cool-new-tools">Cool new tools</a></li>
<li><a href="#igor-wiedler-and-functional-programing">Igor Wiedler and Functional Programing</a></li>
<li><a href="#todd-moto-and-javascript">Todd Moto and Javascript</a></li>
<li><a href="#hexagonal-rchitecture">Hexagonal Architecture</a></li>
<li><a href="#some-insightful-tweets">Some insightful tweets</a></li>
<li><a href="#performance">Performance</a></li>
<li><a href="#symfony-components">Symfony Components</a></li>
<li><a href="#richard-miller">Richard Miller</a></li>
<li><a href="#mathias-verraes">Mathias Verraes</a></li>
<li><a href="#elnur">Elnur</a></li>
<li><a href="#uncle-bob-and-8th-light">Uncle Bob and 8th light</a></li>
<li><a href="#tests-and-tdd">Tests and TDD</a></li>
<li><a href="#agile-and-bdd">Agile and BDD</a></li>
<li><a href="#miscellaneous">Miscellaneous</a></li>
</ul>

<blockquote>
  <p><strong>Warning</strong>: The order and categories are quite random.</p>
</blockquote>

<h2 id="cool-new-tools">Cool new tools</h2>

<ul>
<li><a href="http://webmozarts.com/2014/12/03/puli-powerful-resource-management-for-php/">Puli - Powerful Resource Management for PHP</a></li>
<li><a href="http://gnugat.github.io/redaktilo/">Redaktilo - An easy line manipulation PHP lib: jump, insert and do anything!</a></li>
<li><a href="http://couscous.io/">Couscous - Put your markdown documentation online</a></li>
<li><a href="https://gist.github.com/mathiasverraes/9046427">Test Framework in a tweet</a></li>
<li><a href="http://yohan.giarel.li/Finite/index.html">Finite, a state machine library for PHP</a></li>
</ul>

<h2 id="igor-wiedler-and-functional-programing">Igor Wiedler and Functional Programing</h2>

<ul>
<li><a href="https://igor.io/2014/01/06/functional-library-iter.html">Functional Library: Iteration</a></li>
<li><a href="https://igor.io/2014/01/08/functional-library-traversal.html">Functional Library: Traversal</a></li>
<li><a href="https://igor.io/2014/01/10/functional-library-null.html">Functional Library: Null</a></li>
</ul>

<p>See also:</p>

<ul>
<li><a href="http://nikic.github.io/2014/01/10/The-case-against-the-ifsetor-function.html">The case against the ifsetor function</a></li>
</ul>

<h2 id="todd-moto-and-javascript">Todd Moto and Javascript</h2>

<ul>
<li><a href="http://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/">Everything you wanted to know about javascript scopes</a></li>
<li><a href="http://toddmotto.com/avoiding-anonymous-javascript-functions/">Avoiding anonymous JavaScript functions</a></li>
<li><a href="http://toddmotto.com/mastering-the-module-pattern/">Mastering the Module Pattern</a></li>
<li><a href="http://toddmotto.com/understanding-the-this-keyword-in-javascript/">Understanding the “this” keyword in JavaScript</a></li>
<li><a href="http://toddmotto.com/what-function-window-document-undefined-iife-really-means/">What (function (window, document, undefined) {})(window, document); really means</a></li>
</ul>

<p>See also:</p>

<ul>
<li><a href="http://www.slideshare.net/weaverryan/cool-like-frontend-developer-grunt-requirejs-bower-and-other-tools-29177248">Cool like a Frontend Developer: Grunt, RequireJS, Bower and other Tools</a></li>
<li><a href="http://www.maori.geek.nz/post/i_promise_this_will_be_short">What are Promises and Deferred Objects?</a></li>
</ul>

<h2 id="hexagonal-architecture">Hexagonal Architecture</h2>

<ul>
<li><a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal Architecture</a></li>
<li><a href="http://pivotallabs.com/hexagonal-rails-and-the-ludicrous-terminal-application/">Hexagonal Rails and The Ludicrous Terminal Application</a></li>
<li><a href="http://collectiveidea.com/blog/archives/2012/06/28/wheres-your-business-logic/">Where's Your Business Logic?</a></li>
<li><a href="https://github.com/igorw/doucheswag">doucheswag source code</a></li>
<li><a href="https://speakerdeck.com/igorw/silex-an-implementation-detail-tnphp">Silex, an implementation detail</a></li>
</ul>

<h2 id="some-insightful-tweets">Some insightful tweets</h2>

<ul>
<li><code>Interface</code> suffix and <code>Abstract</code> prefix is nothing else than an acceptance of
your failure to name things clear in the first place. <a href="https://twitter.com/everzet/status/432925046731186176">@everzet</a></li>
<li>Once #PuliPHP is stable, many reasons for bundles will be gone.
Then a bundle is just a package with DI config
<a href="https://twitter.com/webmozart/status/545642670753062914">@webmozart</a></li>
<li>TDD #InATweet: 1. write the test 2. write enough code to make it pass,
in a quick and dirty way 3. refactor <a href="https://twitter.com/epiloic/status/442202139600113664">@epiloic</a></li>
<li>spec #BDD #InATweet: test method names shoulb be senteces (it_should_do_something rather than testMethod)
<a href="https://twitter.com/epiloic/status/441830123437064192">@epiloic</a></li>
<li>story #BDD #InATweet: acceptance criteria (from user stories) should be executable
<a href="https://twitter.com/epiloic/status/446540046800543744">@epiloic</a></li>
<li>Rule of thumb number one: never follow blindly rule of thumbs
<a href="https://twitter.com/epiloic/status/442334229645762560">@epiloic</a></li>
<li>Should #Behat's training wheels come off too?
http://aslakhellesoy.com/post/11055981222/the-training-wheels-came-off
<a href="https://twitter.com/epiloic/status/463922386736136193">@epiloic</a></li>
</ul>

<h2 id="performance">Performance</h2>

<ul>
<li><a href="http://marcjschmidt.de/blog/2014/02/08/php-high-performance.html">Bring High Performance Into Your PHP App (with ReactPHP)</a></li>
<li><a href="http://symfony.com/blog/push-it-to-the-limits-symfony2-for-high-performance-needs">Push it to the limits - Symfony2 for High Performance needs</a></li>
<li><a href="http://labs.octivi.com/handling-1-billion-requests-a-week-with-symfony2/">Handling 1 Billion requests a week with Symfony2</a></li>
<li><a href="http://labs.octivi.com/mastering-symfony2-performance-doctrine/">Mastering Symfony2 Performance – Doctrine</a></li>
<li><a href="http://devplant.net/2014/08/11/optimizing-php-code/?utm_content=buffer133dd&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">Optimizing PHP code</a></li>
<li><a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html">why GNU grep is fast</a></li>
<li><a href="http://www.sitepoint.com/time-complexity-algorithms/">Time Complexity of Algorithms</a></li>
<li><a href="https://github.com/mybuilder/phpunit-accelerator">PHPUnit accelerator</a></li>
<li><a href="https://gist.github.com/nikic/5015323">Why objects (usually) use less memory than arrays in PHP</a></li>
<li><a href="http://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html">PHP's new hashtable implementation</a></li>
</ul>

<h2 id="symfony-components">Symfony Components</h2>

<ul>
<li><a href="http://loige.com/symfony-security-authentication-made-simple/">Symfony security: authentication made simple (well, maybe!)</a></li>
<li><p><a href="https://www.youtube.com/watch?v=xQyEXzug7P8&amp;feature=youtu.be">Love &amp; Loss, a Symfony Security Play</a></p></li>
<li><p><a href="http://blog.servergrove.com/2014/04/07/symfony2-components-overview-expression-language/">Symfony2 components overview: ExpressionLanguage</a></p></li>
<li><a href="http://jwage.com/post/76799775984/using-the-symfony-expression-language-for-a-reward">Using the Symfony Expression Language for a Reward Rules Engine</a></li>
<li><p><a href="http://blog.elcodi.io/blog/2014/05/20/about-rules-and-expressionlanguage/">About Rules and ExpressionLanguage</a></p></li>
<li><p><a href="http://www.lucas.courot.com/symfony2-console-component-on-steroids.html">Symfony2 Console Component on steroids</a></p></li>
</ul>

<h2 id="richard-miller">Richard Miller</h2>

<ul>
<li><a href="http://richardmiller.co.uk/2014/03/28/symfony2-configuring-different-services-for-different-environments/">Symfony2: Configuring different services for different environments</a></li>
<li><a href="http://richardmiller.co.uk/2012/10/31/symfony2-trimming-fat-from-controllers/">Symfony2: Trimming Fat from Controllers</a></li>
<li><a href="http://richardmiller.co.uk/2014/11/06/value-objects/">Value Objects</a></li>
</ul>

<h2 id="mathias-verraes">Mathias Verraes</h2>

<ul>
<li><a href="http://verraes.net/2014/06/named-constructors-in-php/">Named Constructors in PHP</a></li>
<li><a href="http://verraes.net/2014/08/resolving-feature-envy-in-the-domain/">Resolving Feature Envy in the Domain</a></li>
<li><a href="http://verraes.net/2014/08/sterile-estimation/">Sterile Estimation</a></li>
<li><a href="http://verraes.net/2013/09/extract-till-you-drop/">Extract Till You Drop</a></li>
<li><a href="http://verraes.net/2014/12/how-much-testing-is-too-much/">How Much Testing is Too Much?</a></li>
</ul>

<h2 id="elnur">Elnur</h2>

<ul>
<li><a href="http://elnur.pro/behat-and-mink-are-not-meant-to-be-together/">Behat and Mink Are Not Meant to Be Together</a></li>
<li><a href="http://elnur.pro/use-the-domain-language-in-bdd-features/">Use the Domain Language in BDD Features</a></li>
<li><a href="http://elnur.pro/use-only-infrastructural-bundles-in-symfony/">Use Only Infrastructural Bundles in Symfony</a></li>
<li><a href="http://elnur.pro/bdd-does-not-replace-testing/">BDD Does Not Replace Testing</a></li>
<li><a href="http://elnur.pro/triangulation-in-testing/">Triangulation in Testing</a></li>
<li><a href="http://elnur.pro/stop-playing-god-with-project-constraints/">Stop Playing God With Project Constraints</a></li>
<li><a href="http://elnur.pro/assets-cache-busting-in-symfony/">Assets Cache Busting in Symfony</a></li>
<li><a href="http://elnur.pro/make-atomic-commits/">Make Atomic Commits</a></li>
</ul>

<h2 id="uncle-bob-and-8th-light">Uncle Bob and 8th light</h2>

<ul>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/01/27/TheChickenOrTheRoad.html">The Domain Discontinuity</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html">When should you think</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">When TDD doesn't work</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html">When to Mock</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/05/14/TheLittleMocker.html">The little Mocker</a></li>
<li><a href="http://blog.8thlight.com/uncle-bob/2014/05/19/First.html">First</a></li>
<li><p><a href="http://blog.cleancoder.com/uncle-bob/2014/09/03/TestTime.html">TestTime</a></p></li>
<li><p><a href="http://blog.8thlight.com/doug-bradbury/2014/06/18/how-men-and-women-think-differently.html">How Men and Women Think Differently</a></p></li>
<li><a href="http://blog.8thlight.com/ben-spatafora/2014/07/15/command-objects-are-gerunds.html">Command Objects Are Verbs</a></li>
<li><a href="http://blog.8thlight.com/eric-smith/2014/07/18/standups-are-broken-but-should-they-be-fixed.html">Stand-ups are Broken, but Should They be Fixed?</a></li>
<li><a href="http://blog.8thlight.com/ginny-hendry/2014/07/11/take-pride-in-your-legacy-code.html">Take Pride in Your Legacy Code</a></li>
</ul>

<h2 id="tests-and-tdd">Tests and TDD</h2>

<ul>
<li><a href="http://www.getdonedone.com/five-test-cases-for-fewer-bugs/">Want To Introduce Fewer Bugs? Test Through These Five Cases.</a></li>
<li><a href="http://martinfowler.com/bliki/UnitTest.html">UnitTest</a></li>
<li><a href="https://www.destroyallsoftware.com/blog/2014/test-isolation-is-about-avoiding-mocks">Test Isolation Is About Avoiding Mocks</a></li>
<li><a href="http://pivotallabs.com/tests-implementation-detail/">Tests Are An Implementation Detail</a></li>
<li><a href="http://codurance.com/2014/12/13/naming-test-classes-and-methods/">Naming Test Classes and Methods</a></li>
<li><a href="http://www.daedtech.com/what-tdd-is-and-is-not?utm_content=buffer835cd&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">What TDD is and is not</a></li>
<li><a href="http://martinfowler.com/articles/is-tdd-dead/">Is TDD dead</a></li>
<li><a href="https://www.destroyallsoftware.com/blog/2014/tdd-straw-men-and-rhetoric">TDD, Straw Men, and Rhetoric</a></li>
</ul>

<h2 id="agile-and-bdd">Agile and BDD</h2>

<ul>
<li><a href="http://rob.conery.io/2013/08/28/how-behavioral-is-your-bdd/">How behavioral is your BDD?</a></li>
<li><a href="http://dannorth.net/whats-in-a-story/">What's in a story?</a></li>
<li><a href="http://dannorth.net/2013/08/08/blink-estimation/">Blink estimations</a></li>
<li><a href="http://nomad8.com/acceptance_criteria/">On acceptance criteria for User Stories</a></li>
<li><a href="http://dannorth.net/2014/07/18/capturing-the-narrative/">Capturing the narrative</a></li>
<li><a href="http://labs.octivi.com/pair-programming-from-the-developers-perspective/">Pair programming from the developer’s perspective</a></li>
<li><a href="http://www.mountaingoatsoftware.com/blog/my-primary-criticism-of-scrum">My Primary Criticism of Scrum</a></li>
<li><a href="http://lizkeogh.com/2014/08/21/a-dev-walks-into-a-bar/">A dev walks into a bar…</a></li>
<li><a href="http://lizkeogh.com/2014/09/01/deriving-gherkin-from-real-conversations/">Deriving Gherkin from Real Conversations</a></li>
<li><a href="https://medium.com/@frankdejonge/a-case-against-coding-lingo-8ffae1a4fa4e">A Case Against Coding Lingo</a></li>
<li><a href="http://techportal.inviqa.com/2014/09/11/my-top-ten-favourite-phpspec-limitations/">My top ten favourite PhpSpec limitations</a></li>
<li><a href="http://everzet.com/post/99045129766/introducing-modelling-by-example">Introducing Modelling by Example</a></li>
</ul>

<h2 id="miscellaneous">Miscellaneous</h2>

<ul>
<li><a href="http://dongilbert.net/a-case-for-service-location/">A case for service location</a></li>
<li><a href="http://blog.schauderhaft.de/2012/01/01/the-one-correct-way-to-do-dependency-injection/">The One correct way to do Dependency Injection</a></li>
<li><p><a href="http://ewanvalentine.io/difference-between-services-and-controllers/">Difference between services and controllers</a></p></li>
<li><p><a href="http://code.tutsplus.com/tutorials/the-repository-design-pattern--net-35804">The repository Design Pattern</a></p></li>
<li><a href="http://www.jefclaes.be/2014/01/repositories-where-did-we-go-wrong_26.html">Repositories, where did we go wrong?</a></li>
<li><p><a href="http://mnapoli.fr/repository-interface/">The repository interface</a></p></li>
<li><p><a href="http://blog.ploeh.dk/2010/12/02/Interfacesarenotabstractions/">Interfaces are not abstractions</a></p></li>
<li><a href="http://blog.ploeh.dk/2010/12/03/Towardsbetterabstractions/">Towards better abstractions</a></li>
<li><a href="http://adamcod.es/2013/11/22/tell-dont-ask.html">Tell, don't ask</a></li>
<li><a href="http://jeremydmiller.com/2014/06/19/pragmatic-and-other-rants/">Why I hate the word “Pragmatic” and other rants</a></li>
<li><a href="http://techportal.inviqa.com/2014/07/23/your-code-sucks-tips-on-giving-feedback-2/">“Your code sucks” – Tips on giving feedback</a></li>
<li><a href="http://marcgg.com/blog/2014/07/22/in-defense-of-legacy-code/">Some Respect For Legacy Code</a></li>
<li><p><a href="https://medium.com/things-developers-care-about/why-your-previous-developer-was-terrible-506a06ae35ea">Why your previous developer was terrible</a></p></li>
<li><p><a href="http://www.dabeaz.com/coroutines/index.html">A Curious Course on Coroutines and Concurrency</a></p></li>
<li><p><a href="http://strongloop.com/strongblog/how-to-generators-node-js-yield-use-cases/">Generators in Node.js: Common Misconceptions and Three Good Use Cases</a></p></li>
<li><p><a href="https://wildlyinaccurate.com/a-hackers-guide-to-git">A Hacker’s Guide to Git</a></p></li>
<li><p><a href="https://wiki.openstack.org/wiki/GitCommitMessages">Git Commit Message Good Practice</a></p></li>
<li><p><a href="http://brikis98.blogspot.fr/2014/05/you-are-what-you-document.html">You are what you document</a></p></li>
<li><p><a href="http://www.infoq.com/articles/better-best-practices">Better Best Practices</a></p></li>
<li><a href="http://symfony.com/doc/2.6/best_practices/index.html">Symfony Best Practices</a></li>
<li><a href="http://knpuniversity.com/blog/AppBundle">Bundles, No Bundles and AppBundle in 10 Steps</a></li>
<li><a href="http://www.whitewashing.de/2014/10/26/symfony_all_the_things_web.html">Symfony All The Things (Web)</a></li>
<li><p><a href="http://welcometothebundle.com/best-resources-about-symfony-tdd-bdd-ddd-methologies/">Best resources about methodologies on Symfony, PHP, DDD, BDD ...</a></p></li>
<li><p><a href="http://jwage.com/post/73741567918/doctrine-is-not-just-an-orm-for-relational">Doctrine is not just an ORM for Relational Databases</a></p></li>
<li><p><a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/working-with-objects.html#entity-object-graph-traversal">Doctrine Entity Object Graph Traversal</a></p></li>
<li><p><a href="http://www.udidahan.com/2009/06/07/the-fallacy-of-reuse/">The fallacy of reuse</a></p></li>
<li><a href="https://today.java.net/article/2006/04/04/exception-handling-antipatterns">Exception-Handling Antipatterns</a></li>
<li><a href="http://martinfowler.com/bliki/OpportunisticRefactoring.html">OpportunisticRefactoring</a></li>
<li><a href="http://www.jefclaes.be/2013/02/adding-r-to-cqs-some-storage-options.html?spref=tw">Adding the R to CQS: some storage options</a></li>
<li><a href="http://dev.imagineeasy.com/post/96604754704/naming-things-considered-hard">Naming things considered hard</a></li>
<li><a href="http://dev-human.com/entries/2014/07/17/Want_To_Be_More_Productive_Work_Less/">Want To Be More Productive? Work Less!</a></li>
<li><a href="http://marmelab.com/blog/2014/09/01/one-new-tech-per-project.html">One New Tech Per Project</a></li>
<li><a href="http://www.slate.com/articles/double_x/doublex/2014/03/brigid_schulte_s_overwhelmed_and_our_epidemic_of_busyness.html">You’re Not As Busy As You Say You Are</a></li>
<li><a href="http://www.martinfowler.com/eaaCatalog/dataMapper.html">For those using "Manager" as a classname: Data Mapper</a></li>
<li><a href="http://knpuniversity.com/blog/composer-require">Update your Docs for "composer require", then Celebrate with a Sandwich</a></li>
<li><a href="http://homakov.blogspot.fr/2013/03/oauth1-oauth2-oauth.html">OAuth1, OAuth2, OAuth...?</a></li>
<li><a href="http://rickosborne.org/blog/2014/01/uncheck-the-struggle-box/">Uncheck the struggle box</a></li>
<li><a href="https://medium.com/@ninjudd/passwords-are-obsolete-9ed56d483eb">Passwords are Obsolete</a></li>
<li><a href="http://php-di.org/news/06-php-di-4-0-new-definitions.html">Why was YAML a bad choice</a></li>
<li><a href="http://nikic.github.io/2012/06/15/The-true-power-of-regular-expressions.html">The true power of regular expressions</a></li>
<li><a href="http://rosstuck.com/notes-from-laraconeu/#custom-requests">Laravel Custom Requests</a></li>
<li><a href="http://blog.ircmaxell.com/2014/10/foundations-of-oo-design.html">Foundations Of OO Design</a></li>
<li><a href="http://stackoverflow.com/questions/22761554/php-get-all-class-names-inside-a-particular-namespace/27440555#27440555">PHP - get all class names inside a particular namespace</a></li>
</ul>
]]></content>
        </entry>
    </feed>